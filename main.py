# -*- coding: utf-8 -*-
#!/usr/bin/env python
# PEP-8
# Copyright (C) 2023 buvanenko, mdpanf
# Licensed under https://mit-license.org

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import random
import traceback

from config import config
from typing import Tuple

from vkbottle import GroupEventType, ABCRule
from vkbottle.bot import Bot, Message, MessageEvent
from vkbottle.tools import PhotoMessageUploader
from stories_uploader import StoriesUploader

from data import floor, nft, chart, dialogue, staking, rubles, stories, currency
from vk import keyboards, widget, cleaner, chat_info, stickers

import formating

from vk.rules import ChitChatRule

bot = Bot(token=config.vk.token)
uploader = PhotoMessageUploader(bot.api, generate_attachment_strings=True)
stories_uploader = StoriesUploader(bot.api)


async def post_story():
    try:
        stats = await floor.get_stats()
        matic_rub, matic_usd = await currency.get_matic_rate()
        floor_rub = '{0:,}'.format(int(stats['floorPrice'] * matic_rub)).replace(',', ' ')
        volume_rub = '{0:,}'.format(int(stats['volume'] * matic_rub)).replace(',', ' ')
        image = stories.generate_image(f"{floor_rub} ‚ÇΩ", f"{volume_rub} ‚ÇΩ", stats['owners'], stats['items'])
        attachment = await stories_uploader.upload(image, add_to_news=1, link_text="to_store", link_url="https://vk.com/wall-220643723_72")
        return attachment
    except Exception as e:
        await bot.api.messages.send(
            peer_id=434356505,
            message=traceback.format_exc(),
            random_id=random.randint(0, 2**64),
        )

def generate_reply(ans: Message):
    string = f'"peer_id": {ans.peer_id}, "conversation_message_ids": [{ans.conversation_message_id}], \
        "is_reply": 1'
    return "{" + string + "}"


# –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
class CommandRule(ABCRule):
    def __init__(self, commands: Tuple[str, ...]):
        self.commands = commands

    async def check(self, message: Message) -> bool:
        return message.text.lower().split()[0] in self.commands


# –í—ã–≤–µ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä
@bot.on.message(CommandRule(commands=("/floor", "/—Ñ–ª–æ—Ä", "/akjh", "–Ω–∞—á–∞—Ç—å", "start")))
async def now_handler(message: Message):
    bot_message = await floor.get()
    if message.peer_id == message.from_id:
        raw_data = await floor.get_raw()
        buf = chart.generate(raw_data)
        attachment = await uploader.upload(buf, peer_id=message.peer_id)
        await message.answer(
            bot_message, attachment=attachment, keyboard=keyboards.get_dm()
        )
    else:
        # if not await admin.check(bot, message.peer_id, message.from_id):
        #     await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        #     return
        await message.answer(bot_message, keyboard=keyboards.get_chat())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def chart_handler(event: MessageEvent):
    # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–æ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if event.object.payload.get("command") == "update":
        bot_message = await floor.get()
        await bot.api.messages.edit(
            peer_id=event.object.peer_id,
            conversation_message_id=event.conversation_message_id,
            message=bot_message,
            keyboard=keyboards.get_chat(),
        )
        await event.show_snackbar("–§–ª–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return

    # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–æ—Ä –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if event.object.payload.get("command") == "full_update":
        bot_message = await floor.get()
        raw_data = await floor.get_raw()
        buf = chart.generate(raw_data)
        attachment = await uploader.upload(buf, peer_id=event.object.peer_id)
        await bot.api.messages.edit(
            peer_id=event.object.peer_id,
            conversation_message_id=event.conversation_message_id,
            message=bot_message,
            attachment=attachment,
            keyboard=keyboards.get_dm(),
        )
        await event.show_snackbar("–§–ª–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return

    raw_data = await floor.get_raw()
    buf = chart.generate(raw_data)
    try:
        attachment = await uploader.upload(buf, peer_id=event.object.user_id)
        await bot.api.messages.send(
            peer_id=event.object.user_id,
            attachment=attachment,
            keyboard=keyboards.get_dm(),
            random_id=random.randint(0, 2**64),
        )
        await event.show_snackbar("–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        return
    except Exception as e:
        await event.show_snackbar(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫! –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º."
        )
        raise e


# –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
@bot.on.message(CommandRule(commands=("/–∫–æ—à–µ–ª–µ–∫", "/–∫–æ—à–µ–ª—ë–∫", "/wallet")))
async def wallet_handler(message: Message):
    address = await bot.api.storage.get("wallet", user_id=message.from_id)
    if address[0].value == "":
        await message.answer("üëõ –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω! –ü–æ—Å–µ—Ç–∏—Ç–µ auth.sovietgirls.su")
        return

    m = await bot.api.messages.send(
        peer_id=message.peer_id,
        message="üëõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        random_id=random.randint(0, 2**64),
    )

    balance, balance_matic, balance_rub, balance_usd = await nft.get_balance(
        address[0].value
    )
    sgr_count = await rubles.balance_of(address[0].value)
    bot_message = f"üëõ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {address[0].value}\n"
    bot_message += f"üí≥ {sgr_count} SG‚ÇΩ\n\n"
    bot_message += f"üëß NFT –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {balance}\n"
    bot_message += "ü™ô –¶–µ–Ω–∞ –ø–æ —Ñ–ª–æ—Ä—É:\n"
    bot_message += f"MATIC: {balance_matic}\n"
    bot_message += f"–†—É–±–ª–∏: {balance_rub} ‚ÇΩ\n"
    bot_message += f"–î–æ–ª–ª–∞—Ä—ã: {balance_usd} $\n\n"

    staking_count = await staking.balance_of(address[0].value)
    if staking_count > 0:
        bot_message += f"‚õèÔ∏è NFT –≤ —Å—Ç–µ–π–∫–∏–Ω–≥–µ: {staking_count}\n"
        bot_message += f"({round(staking_count*1.4,2)} SG‚ÇΩ/–ß–∞—Å)"

    keyboard = keyboards.get_wallet(address[0].value)

    await bot.api.messages.edit(
        peer_id=message.peer_id,
        message_id=m,
        message=bot_message,
        keyboard=keyboard.get_json(),
    )
    # await message.answer(bot_message, keyboard=keyboard.get_json())

# –ó–∞–ø–æ—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
@bot.on.message(CommandRule(commands=("/story")))
async def story_handler(message: Message):
    await post_story()
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")


# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
@bot.on.message(CommandRule(commands=("/clean", "/–æ—á–∏—Å—Ç–∏—Ç—å")))
async def clean_handler(message: Message):
    await cleaner.start(bot=bot)
    await message.answer("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


# –ë–æ–ª—Ç–∞–ª–∫–∞
@bot.on.message(ChitChatRule())
async def chit_chat_handler(message: Message):
    address = await bot.api.storage.get("wallet", user_id=message.from_id)
    if address[0].value == "":
        return
    owner = await nft.check_owner(address[0].value)
    if not owner:
        return
    
    user = await bot.api.users.get(user_ids=message.from_id)
    user_name = f"{user[0].first_name}"

    await bot.api.messages.set_activity(type="typing", peer_id=message.peer_id)
    answer = dialogue.get_answer(message.text, message.peer_id, user_name)

    if "OPERATOR_CALL" in answer and message.peer_id == message.from_id:
        await message.answer("üëÆ‚Äç‚ôÇÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω!")
        await bot.api.messages.send(
            peer_id=434356505,
            message=f"üëÆ‚Äç‚ôÇÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω –≤ —á–∞—Ç–µ https://vk.com/gim220643723?sel={message.peer_id}",
            random_id=random.randint(0, 2**64),
        )
        return
    elif "OPERATOR_CALL" in answer:
        await message.answer(
            "–Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ."
        )
        return

    if "FLOOR_CALL" in answer:
        await now_handler(message)
        return
    
    if "WALLET_CALL" in answer:
        await wallet_handler(message)
        return

    if message.peer_id != message.from_id:
        await message.answer(
            formating.remove_emoji(answer), forward=generate_reply(message)
        )
    else:
        await message.answer(formating.remove_emoji(answer))

    emoji = formating.find_emoji(answer)
    if emoji:
        sticker = stickers.get_sticker(emoji)
        if sticker:
            await message.answer("", sticker_id=sticker)


# –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
@bot.loop_wrapper.interval(minutes=1)
async def update():
    try:
        await widget.update()
        await cleaner.start(bot=bot)
        await chat_info.check_stats()
    except Exception as e:
        await bot.api.messages.send(
            peer_id=434356505,
            message=traceback.format_exc(),
            random_id=random.randint(0, 2**64),
        )

# –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏
@bot.loop_wrapper.interval(hours=24)
async def daily():
    try:
        await post_story()
    except Exception as e:
        await bot.api.messages.send(
            peer_id=434356505,
            message=traceback.format_exc(),
            random_id=random.randint(0, 2**64),
        )


if __name__ == "__main__":
    bot.run_forever()
